// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	config "easy-frpc/internal/handler/config"
	role "easy-frpc/internal/handler/role"
	user "easy-frpc/internal/handler/user"
	"easy-frpc/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/user/:userid",
					Handler: user.CreateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/user/:userid",
					Handler: user.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/users",
					Handler: user.GetUsersHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/user/:userid",
					Handler: user.DeleteUserHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/role",
					Handler: role.CreateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/roles",
					Handler: role.GetRolesHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/fprc/config",
					Handler: config.GetFrpcConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/frpc/config/common",
					Handler: config.UpdateFprcCommonConfigHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/frpc"),
	)
}
